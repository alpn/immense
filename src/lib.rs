//! immense describes 3D structures with L-Systems and outputs them as Wavefront Object files you
//! can plug into your renderer of choice.
//!
//! # Basics
//! 
//! There are some builtin rules for meshes such as `cube()`. We can build production rules from
//! them to describe structures. For example:
//!
//! ````
//! cube()
//! ````
//! ![](https://i.imgur.com/s68Kk0U.png)
//!
//! ````
//! cube().tf(Translate::x(3))
//! ````
//!
//! ![](https://i.imgur.com/1nALK9q.png)
//!
//! ````
//! cube().tf(Replicate::n(3, Translate::y(1.1)))
//! ````
//!
//! ![](https://i.imgur.com/xqufPmN.png)
//! 
//! # Recursion
//! 
//! To recurse, we will use immense's `RuleBuilder` trait. Any type implementing `RuleBuilder` can be evaluated.

#![feature(custom_attribute)]
#![feature(bind_by_move_pattern_guards)]

mod api;
mod error;
mod export;
mod mesh;
mod parameters;

pub use crate::api::*;
pub use crate::error::Error;

use crate::error::Result;
use std::io;

/// Writes a Wavefront object file describing the scene generated by expanding the given rule.
pub fn generate(rule: impl RuleBuilder, mut sink: impl io::Write) -> Result<()> {
    let meshes = rule
        .build_rule(Rule::default())
        .build(parameters::Parameters::default());
    let mut vertex_offset = 0;
    for mesh in meshes {
        let vertex_count = mesh.vertices.len();
        export::render_obj(mesh, vertex_offset, &mut sink)?;
        vertex_offset += vertex_count;
    }
    Ok(())
}
